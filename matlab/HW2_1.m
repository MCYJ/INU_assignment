% n은 0보다 크거나 같은 정수이므로, 0으로 정의
n = 0;

% n = 0 일때의 a_n 값 계산
a_n = 16*((-1)^n)/((5^(2*n+1))*(2*n+1)) - 4*((-1)^n)/((239^(2*n+1))*(2*n+1));

fprintf("n: %d a_n: %.12f\n", n, abs(a_n-pi));
% 절대오차가 0.000001 보다 클 경우, n을 증가시키는 while문 작성
while abs(a_n-pi) > 0.000001
    % n 증가
    n = n + 1;
    % a_n 초기화
    a_n = 0;
    % k 초기화
    k = 0;
    % k를 n까지 증가시키면서 a_n에 값 누적합
    while k <= n
        a_n = a_n + 16*((-1)^k)/((5^(2*k+1))*(2*k+1)) - 4*((-1)^k)/((239^(2*k+1))*(2*k+1));
        k = k + 1;
    end
    fprintf("n: %d a_n: %.12f\n", n, abs(a_n-pi));
end
% 최종적으로 계산된 n값 출력
fprintf("|a_n - pi| <= 0.000001 만족하는 최소의 n값 : %d\n",n);